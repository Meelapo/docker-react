# Tell Travis we need a copy of docker running
# Build our image using Dockerfile.dev
# Tell Travis how to run our test suite
# Tell Travis how to deploy our code to AWS

# Ensures image uses has the proper programming language and services available
language: generic

# Tells Travis to get super user permissions
sudo: required

# TravisCI will add Docker to the container
services:
    - docker

# Things that need to occur before tests are run
# We'll need our docker image to be built
before_install:
    - docker build -t captainslow/docker-react -f Dockerfile.dev .

# Series of commands that will need to be executed in order to run tests
# If TravisCI ever gets a return status of something other than 0 it will assume the build/test are broken
script:
    - docker run -e CI=true captainslow/docker-react npm run test

# Configuration to tell TravisCI to deploy to AWS
# TravisCI comes with some pre-configured instructions to deploy to specific locations
# TravisCI will need to upload all the code content to an S3 bucket and then tell elasticbeanstalk to redo its work
# Will only get deployed when the "main" branch gets pushed
deploy:
    provider: elasticbeanstalk
    region: "ca-central-1"
    app: "docker-react"
    env: "Dockerreact-env"
    bucket_name: "elasticbeanstalk-ca-central-1-195906913238"
    bucket_path: "docker-react"
    on:
        branch: main
    access_key_id: $AWS_ACCESS_KEY
    secret_access_key: $AWS_SECRET_KEY
